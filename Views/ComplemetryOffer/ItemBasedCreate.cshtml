@model HangOut.Models.MyCustomer.OfferTitle

@{
    Layout = null;
}

<div class="card">
    <div class="card-header">
        <h3 style="text-align:center;color:#000000"><b>Offer Item</b></h3>
        <hr />
    </div>
    <div class="card-body">
        @using (Ajax.BeginForm("SaveItemBased", "ComplemetryOffer", new AjaxOptions { HttpMethod = "POST", LoadingElementId = "waiting", OnSuccess = "OnSuccess" }))
        {
            @Html.HiddenFor(model => model.CBID)
            @Html.HiddenFor(model => model.TitleId)
            <div class="row">
                <div class="col-md-4">
                </div>
                <div class="col-md-4">
                    @Html.Label("Offer Title")
                    @Html.TextBoxFor(model => model.Name, new { @class = "form-control ", @Required = "Required" })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4">
                </div>
            </div>
            for (int i = 0; i < Model.itemOffers.Count; i++)
            {
             @Html.Partial("OfferItemBased", Model.itemOffers[i]);
            }
            <div id="AppendItem">

            </div>
            <div class="row">
                <div class="col-md-5">
                </div>
                <div class="col-md-2" id="btn">
                    <a title="Add Item" class="btn btn-success form-control" onclick="ShowItemsToOrder();"> <i class="fa fa-plus"></i></a>
                </div>
                <div class="col-md-5">
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">

                </div>
                <div class="col-md-2">
                    @Html.Label("Final Price")
                    @Html.TextBoxFor(model => model.FinalPrice, new { @class = "form-control ", @Required = "Required" })
                    @Html.ValidationMessageFor(model => model.FinalPrice, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.Label("Total Item Price")
                    @Html.TextBoxFor(model => model.TotalItemPrice, new { @class = "form-control  ", @Required = "Required", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.TotalItemPrice, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4">

                </div>
                <div class="col-md-5">

                </div>
                <div class="col-md-2">
                    @Html.Label("Max Order Qty")
                    @Html.TextBoxFor(model => model.MaxOrdQty, new { @class = "form-control ", @Required = "Required" })
                    @Html.ValidationMessageFor(model => model.MaxOrdQty, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-5">

                </div>
                <div class="col-md-12">
                    @Html.Label("Discription")
                    @Html.TextAreaFor(model => model.Discription, new { @class = "form-control ", @Required = "Required" })
                    @Html.ValidationMessageFor(model => model.Discription, "", new { @class = "text-danger" })
                </div>

            </div>
            <div class="col-md-1" style="margin-top:5px;">
                @Html.Label("Save", new { @class = "text-white" })
                <input type="submit" value="Next" class="btn btn-success form-control" />
            </div>
        }
    </div>

</div>

<script>
    function ShowItemsToOrder() {
        $("#waiting").show();
        $.ajax({
            type: 'GET',
            url: "/HG_Items/AddItemToOrder",
            success: function (data) {
                makedpt("ShowItems", 600, 600);
                $("#ShowItems > .modal-dialog > .modal-content > .modal-body").html(data);
                showdpt("ShowItems");
                $("#waiting").hide();
            },
            error: function (jqXhr, textStatus, errorMessage) { // error callback
                $("#waiting").hide();
            }
        });
    }
    function Hideme() {
           hidedpt("ShowItems");
       }
    function AddItem(event, ItemId) {
        if (event.checked) {
            var ItemsAlreadyAdded = document.getElementsByClassName('ItemId');
            for (var i = 0; i < ItemsAlreadyAdded.length; i++) {
                var ObjItem = $(ItemsAlreadyAdded[i]);
                if (ObjItem.val() == ItemId) {
                    alert('Item Already Added');
                    $(event).click();
                    return;
                }
            }
            $.ajax({
                type: 'GET',
                url: "/ComplemetryOffer/AddOfrItemBased?Itemid=" + ItemId,
                success: function (data) {
                    $("#AppendItem").append(data);
                     FunTotalItemPrice();
                },
                error: function (jqXhr, textStatus, errorMessage) { // error callback
                    $("#waiting").hide();
                }
            });
        }

    }
    function RemoveItem(itemid, event) {
        $(event).parent('div').parent('div').find('.IsDeleted').val('1');
        $(event).parent('div').parent('div').hide();
        $(event).parent('div').parent('div').find('.TotalItemPrice').removeClass();
        FunTotalItemPrice();
    }
    function FunTotalItemPrice() {
        var itemprice = 0.00;
        var TotalItemPrice = document.getElementsByClassName('TotalItemPrice');
        for (var i = 0; i < TotalItemPrice.length; i++) {
            itemprice +=parseFloat(TotalItemPrice[i].value);
        }
        $("#TotalItemPrice").val(itemprice.toFixed(2));
    }
</script>