@using HangOut.Models;
@{    Layout = null;}
@{

    int OrgId = int.Parse(Request.Cookies["UserInfo"]["OrgId"]);
    //PrintInvoice TorSid

    Int64 OID = Int64.Parse(Request.QueryString["OID"]);
    List<HG_Orders> orderlist = new List<HG_Orders>();
    List<HG_OrderItem> OrderItems = new List<HG_OrderItem>();
    DateTime OrderDate = DateTime.Now;
    if (Request.QueryString["TorSid"] != null)
    {
        Int64 TorSid = Int64.Parse(Request.QueryString["TorSid"]);
        // int OldOtp = int.Parse(Request.QueryString["OldOtp"]);
        orderlist = new HG_Orders().GetListByGetDate(DateTime.Now, DateTime.Now);
        orderlist = orderlist.FindAll(x => x.Table_or_SheatId == TorSid && x.PaymentStatus!=0);
        var orderObj= orderlist
            OrderItems.AddRange(new HG_OrderItem().GetAll(Order.OID));

    }
    else
    {

        HG_Orders order = new HG_Orders().GetOne(OID);
        orderlist.Add(order);
        OrderItems.AddRange(new HG_OrderItem().GetAll(order.OID));
        OrderDate = order.Create_Date;
    }


    HG_OrganizationDetails OrgObj = new HG_OrganizationDetails().GetOne(OrgId);
    string InvoiceHeading = "Test-1";
    string OrgName = "OrgName";
    string AddressLine1 = "";
    string AddressLine2 = "";
    string AddressLine3 = "";
    string Phoneno = "";
    string GstNo = "";
    string Licence2 = "..................";
    string Licence3 = "..................";
    HashSet<string> OrdesHash = new HashSet<string>(orderlist.Select(x => x.OID.ToString()).ToArray());
    string OrderNo = string.Join(",", OrdesHash);
    double AmountTotal = 0.00;
    int Qty = 0;
    string PaymnetMode = "CASH/ONLINE";
    string PoweredBy = "Powered By FoodDo";
    string TicketNos = "";
    List<HG_Items> ItemList = new HG_Items().GetAll();
    HashSet<string> hashTicket = new HashSet<string>(OrderItems.Select(x => x.TickedNo.ToString()).ToArray());
    TicketNos = string.Join(",", hashTicket);
    if (OrgObj.OrgID>0)
    {
        InvoiceHeading = OrgObj.IvoiceHeading;
        OrgName = OrgObj.Name;
        AddressLine1 = OrgObj.Address;
        AddressLine2 = OrgObj.AddressLin2;
        AddressLine3 = OrgObj.AddressLine3;
        Phoneno = OrgObj.Phone;
        GstNo = OrgObj.GSTNO;
        Licence2 = OrgObj.Licence2;
        Licence3 = OrgObj.License3;

    }


}

<style>
    @@media print {
        body * {
            visibility: hidden;
        }
        #section-to-print {
            width: 21cm;
            height: 29.7cm;
            margin: 30mm 45mm 30mm 45mm;
        }
            #section-to-print * {
                visibility: visible;
            }
    }

</style>


<div style="min-height:25px">
    <button onclick="window.print();"> PRINT (A-4) </button>
    <button id="Thermal" onclick="PrintElem()"> PRINT(POS)</button>
</div>
<div style="border:2px solid black " id="section-to-print">
    <div style="border:1px dotted black;" >
        <div >
            <h4 style="text-align:center">@InvoiceHeading</h4>
            <h4 style="text-align:center">@OrgName</h4>
            <h5 style="text-align:center">@AddressLine1</h5>
            <h6 style="text-align:center">@AddressLine2</h6>
            <h6 style="text-align:center">@AddressLine3</h6>
            <h5 style="text-align:center">Phone  @Phoneno         @GstNo</h5>
            <h6 style="text-align:center">@Licence2      @Licence3</h6>
        </div>
        <div style="text-align:center">
            <h6><b>ORDER No:</b> @OrderNo   <b>Ticket No:</b> @TicketNos</h6>
            <h6><b>DATE:</b> @OrderDate.ToString("dd/MM/yy HH:mm") <b> MODE:</b>@PaymnetMode </h6>
        </div>
        <table id="InvoiceItems"  class="table col-sm-12">
            <thead>
                <tr>
                    <th>Item </th>
                    <th>QTY</th>
                    <th>AMT </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var items in OrderItems)
                {
                    AmountTotal += items.Price * items.Count;
                    Qty += items.Count;
                    // Qty += items.Qty;
                    HG_Items hG_Items = ItemList.Find(x => x.ItemID == items.FID);
                    <tr>
                        <td>@hG_Items.Items</td>
                        <td>@items.Count</td>
                        <td>@items.Price</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td>TOTAL</td>
                    <td>@Qty.ToString() </td>
                    <td>@AmountTotal.ToString()</td>
                </tr>
            </tfoot>
        </table>
        <div>
            <h6>NOTE: </h6>
            <div>
                .........................................................................<br />
                .........................................................................
            </div>
            <h6>@PoweredBy</h6>
        </div>
    </div>
</div>

<script>
    function printstr(text1, col1, align) {

        if (align === null) {
            align = "center";
        }

        var text = text1.split(",");
        var col = col1.split(",");

        var arr = new Array();
        var i = 0;
        var rtrstr = "";
        for (i = 0; i < text.length; i++) {

            var t = text[i]; //item name
            var c = parseInt(col[i]); //length of column
            var textlenght = t.length;
            var totalspace = c - textlenght;
            var prefixspace = 0;
            var suffixspace = 0;
            switch (align) {
                case "center":
                    prefixspace = parseInt(totalspace / 2);
                    suffixspace = parseInt(totalspace / 2);
                    var remainingspace = totalspace - (prefixspace + suffixspace);
                    prefixspace = prefixspace + remainingspace;
                    break;
                case "left":
                    prefixspace = 0;
                    suffixspace = parseInt(totalspace);
                    break;
                case "right":
                    prefixspace = parseInt(totalspace);
                    suffixspace = 0;
                    break;
                default:
                    prefixspace = parseInt(totalspace / 2);
                    suffixspace = parseInt(totalspace / 2);
                    var remainingspace = totalspace - (prefixspace + suffixspace);
                    prefixspace = prefixspace + remainingspace;
                    break;
            }



            for (j = 0; j < prefixspace; j++) {

                rtrstr += " ";

            }

            rtrstr += t;
            for (j = 0; j < suffixspace; j++) {

                rtrstr += " ";


            }


        }

        return rtrstr + "\n";

    }
    function ConvertDateJA(d) {
        var date = d;
        var dd = date.getDate();
        var m = date.getMonth() + 1;
        var y = date.getFullYear();
        var h = date.getHours();
        var mm = date.getMinutes();
        var s = date.getSeconds();
        return (dd <= 9 ? '0' + dd : dd) + '/' + (m <= 9 ? '0' + m : m) + '/' + y;
        //return curr_year + "-"  + curr_month + "-" + curr_date;
    }
    function PrintToken() {
        zpl = "";
        zpl += printstr("TOKEN -" + Token_number, "34");
        zpl += printstr("----------------------------------", "34");
        zpl += printstr("DATE: " + ConvertDateJA(new Date()), "34");
        zpl += printstr("TIME: " + new Date().toLocaleTimeString(), "34");
        zpl += printstr("----------------------------------", "34");
        zpl += printstr("BUILTY NO " + Builty_number, "34");
        zpl += printstr("----------------------------------", "34");
        zpl += printstr("TRUCK NO : " + Truck_number, "34");
        zpl += printstr("----------------------------------", "34");

        var printWindow = window.open();
        printWindow.document.open('text/plain');

        printWindow.document.write("<pre>" + zpl + "</pre>");
        printWindow.document.close();
        printWindow.focus();
        printWindow.print();
        printWindow.close();
    }
    function PrintElem() {
        var Section = '<style>{ #section-to-print {width:100%; } table{font-size: 14px;font-family:Calibri}</style>';
        Section+=  $('#section-to-print').html();
        console.log("Section  " + Section);
        Popup(Section);
    }

    function Popup(data) {
       // var myWindow = window.open('', 'Receipt', 'height=400,width=600');
        var myWindow = window.open('text/plain');
      //  myWindow.document.write('<html>');
        /*optional stylesheet*/ //myWindow.document.write('<link rel="stylesheet" href="main.css" type="text/css" />');
       // myWindow.document.write('<style type="text/css"> *, html {margin:0;padding:0;} </style>');
     //   myWindow.document.write('<body>');
        myWindow.document.write(data);
       // myWindow.document.write('</body></html>');
        myWindow.document.close(); // necessary for IE >= 10
        myWindow.onload = function () { // necessary if the div contain images
            myWindow.focus(); // necessary for IE >= 10
            myWindow.print();
            myWindow.close();
        };
    }

</script>




