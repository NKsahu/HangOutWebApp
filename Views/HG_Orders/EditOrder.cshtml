@using HangOut.Models
@{     Layout = null;
    Int64 OrderID = Int64.Parse(Request.QueryString["OID"]);
    var OrderItems = new HG_OrderItem().GetAll(OrderID);
    List<HG_Items> listItem = new HG_Items().GetAll();

}

<div class="card">
    <div class="card-header">
        <h5 class="text-center text-danger"><b><u>EditOrder</u></b></h5>
    </div>
    <div class="card-body">
        <table class="table table-hover w-100 css-serial" id="TBLID">
            <thead>
                <tr>
                    <th>
                        S.No
                    </th>
                    <th>
                        Item
                    </th>
                    <th>
                        QTY
                    </th>
                    <th>
                        Ticket No
                    </th>
                    <th>
                        Amount
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var Order in OrderItems)
                {
                    double ItemPrice = Order.Price * Order.Count;
                    //if (Order.Status != 4)
                    //{
                    //    QtyTotal += item.Count;
                    //    AmtTotal += ItemPrice;
                    //    GrandTotal += ItemPrice;
                    //}

                    <tr class="item">
                        <td>
                            &nbsp;
                        </td>
                        <td>
                            @{HG_Items ObjOrder = listItem.Find(x => x.ItemID == Order.FID); }
                            @ObjOrder.Items
                        </td>
                        <td>
                            <div class="row">
                                <div class="col-md-4">

                                </div>
                                <div class="Col-md-1">
                                    <span class="input-group-btn float-right">
                                        <button type="button" class="btn btn-danger btn-number" data-type="minus" data-field="quant[2]" OIID="@Order.OIID" onclick="MinusItemQty(this)" >
                                            <span class="glyphicon glyphicon-minus"><i class="fa fa-minus"></i></span>
                                        </button>
                                    </span>
                                </div>
                                <div class="Col-md-1" >
                                    <input type="text" name="quant[2]" class=" form-control input-number text-center" value="@Order.Count" id="@Order.OIID" min="0" max="20" size="10">

                                </div>
                                <div class="Col-md-1">
                                    <span class="input-group-btn float-left">
                                        <button type="button" class="btn btn-success btn-number" data-type="plus" data-field="quant[2]"  OIID="@Order.OIID" onclick="PlusItemQty(this)">
                                            <span class="glyphicon glyphicon-plus"><i class="fa fa-plus"></i></span>
                                        </button>
                                    </span>
                                </div>
                                <div class="col-md-4">

                                </div>
                            </div>
                        </td>
                        <td>
                            @Order.TickedNo
                        </td>
                        <td id="IntPrice@(Order.OIID)">
                            @ItemPrice.ToString("0.00")
                        </td>
                    </tr>
                }

            </tbody>

        </table> 
        <div class="row">
            <div class="col-4">
                <div class="row">
                    <div class="col-md-5">
                        @Html.Label("Total")
                    </div>
                    <div class="col-md-5">
                        
                    </div>
                </div>
            </div>
            <div class="col-4">
                <div class="row">
                    <div class="col-6">
                        @Html.Label("Total Quantity")
                    </div>
                    <div class="col-6">
                        <label for="male" id="Quantity"> </label>
                    </div>
                </div>

            </div>
            <div class="col-4">
                <div class="row">
                    <div class="col-6">

                    </div>
                    <div class="col-4">
                        @Html.Label("Total Amount")
                    </div>
                    <div class="col-2">
                        <label for="male" id="jjj"> </label>
                    </div>
                </div>

            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-md-4">
            </div>
            <div class="col-md-4">
                @Html.Label("Payment Mode")
                @{
                    List<SelectListItem> li = new List<SelectListItem>();
                    SelectListItem obj1 = new SelectListItem() { Text = "Select Peyment Type", Value = "0" };
                    SelectListItem obj2 = new SelectListItem() { Text = "Cash", Value = "1" };
                    SelectListItem obj3 = new SelectListItem() { Text = "Bank/Wallet", Value = "2" };
                    SelectListItem obj4 = new SelectListItem() { Text = "FoodDo", Value = "3" };
                    li.Add(obj1);
                    li.Add(obj2);
                    li.Add(obj3);
                    li.Add(obj4);

                }
                @Html.DropDownList("PMode", li, new { @class = "form-control " })
            </div>
            <div class="col-sm-1">
                @Html.Label("Save", new { @class = "text-white" })
                <input type="submit" value="Save" class="btn btn-success" style="margin-top: 28px;">

            </div>
        </div>
    </div>
</div>
<script>
    $('.btn-number').click(function (e) {
        e.preventDefault();

        fieldName = $(this).attr('data-field');
        type = $(this).attr('data-type');
        var input = $("input[name='" + fieldName + "']");
        var currentVal = parseInt(input.val());
        if (!isNaN(currentVal)) {
            if (type == 'minus') {

                if (currentVal > input.attr('min')) {
                    input.val(currentVal - 1).change();
                }
                if (parseInt(input.val()) == input.attr('min')) {
                    $(this).attr('disabled', true);
                }

            } else if (type == 'plus') {

                if (currentVal < input.attr('max')) {
                    input.val(currentVal + 1).change();
                }
                if (parseInt(input.val()) == input.attr('max')) {
                    $(this).attr('disabled', true);
                }

            }
        } else {
            input.val(0);
        }
    });
    $('.input-number').focusin(function () {
        $(this).data('oldValue', $(this).val());
    });
    $('.input-number').change(function () {

        minValue = parseInt($(this).attr('min'));
        maxValue = parseInt($(this).attr('max'));
        valueCurrent = parseInt($(this).val());

        name = $(this).attr('name');
        if (valueCurrent >= minValue) {
            $(".btn-number[data-type='minus'][data-field='" + name + "']").removeAttr('disabled')
        } else {
            alert('Sorry, the minimum value was reached');
            $(this).val($(this).data('oldValue'));
        }
        if (valueCurrent <= maxValue) {
            $(".btn-number[data-type='plus'][data-field='" + name + "']").removeAttr('disabled')
        } else {
            alert('Sorry, the maximum value was reached');
            $(this).val($(this).data('oldValue'));
        }


    });
    $(".input-number").keydown(function (e) {
        // Allow: backspace, delete, tab, escape, enter and .
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 ||
            // Allow: Ctrl+A
            (e.keyCode == 65 && e.ctrlKey === true) ||
            // Allow: home, end, left, right
            (e.keyCode >= 35 && e.keyCode <= 39)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    });
    $(document).on('click'  , function (i) {
        Addsum(i);

    });
    $(document).on("keyup", "#txtCal", Addsum);
    function Addsum(ID, Price) {
        console.log("ss");
       
            $.ajax({
                type: 'GET',
                url: "/HG_Orders/UpdateAmt?ID=" + ID + "&Price=" + Price,
                success: function (data) {
                    var qnty = parseInt($("#value").val());
                    var price = Price;
                    var total = 0;
                    if (!isNaN(qnty) && !isNaN(price)) {
                        total = qnty * price  ;
                    }
                    $(data).find("#txtCal").val(total);

                },
                error: function (jqXhr, textStatus, errorMessage) { // error callback
                    $('#waiting').hide();
                }
            });
         
    }
</script>
<script>
    function MinusItemQty(Event) {
      var Cnt=parseInt($(Event).attr('OIID').val());
        $(Event).val(Cnt - 1);
        $.ajax({
            type: 'GET',
            url: "/HG_Orders/UpdateAmt?ID=" +  + "&Price=" + Price,
            success: function (data) {
                var qnty = parseInt($("#value").val());
                var price = Price;
                var total = 0;
                if (!isNaN(qnty) && !isNaN(price)) {
                    total = qnty * price;
                }
                $(data).find("#txtCal").val(total);

            },
            error: function (jqXhr, textStatus, errorMessage) { // error callback
                $('#waiting').hide();
            }
        });

    }
    function PlusItemQty(Event) {
        var Cnt = parseInt($(Event).val());
        $(Event).val(Cnt + 1);
    }
    $(document).ready(function () {
        $('table thead th').each(function (i) {
            calculateColumn(i);
            
        });
    });

    function calculateColumn(index) {
        var total = 0;
        $('table tr').each(function () {
            var value = parseInt($('#txtCal', this).eq(index).text());
            if (!isNaN(value)) {
                total += value;
            }
        });
        $('#jjj').eq(index).text(total);
    }

    $('table thead th').each(function (i) {
        findvalue(i);

    });
   
    console.log("g");
    function findvalue(index) {
        var total = 0;
        var qnty = 1;
        
        
        $(".item").each(function () {
            if (!isNaN(parseInt($("#value").val()))) {
                qnty = parseInt($("#value").val());
            }
            total += qnty;
        });
        $('#Quantity').eq(index).text(total);
    }
    
</script>
@*<script>
    $(document).ready(function () {
        $('table thead th').each(function (i) {
            calculateQty(i);
        });
    });
    function calculateQty(index) {
        var total = 0;
        $('table tr').each(function () {
            console.log("sda");
            var value = parseInt($('.text-center', this).parent('div').parent('div').eq(index).text());
            if (!isNaN(value)) {
                total += value;
            }
        });
        $('#Quantity').eq(index).text(total);
    }
</script>*@
<style>
    body {
        font-family: "Open Sans", helvetica, arial;
    }
    
    table {
        width: 500px; /* For Responsive design set 100% */
        border-collapse: collapse;
        margin: 30px 0px 30px;
        background-color: #fff;
        font-size: 14px;
    }

        table tr {
            height: 40px;
        }

        table th {
            background: #03493e;
            color: #fff;
            font-weight: bold;
            font-size: 18px;
        }

        table td, th {
            padding: 6px 6px 6px 10px;
            border: 1px solid #ccc;
            text-align: center;
        }

        /* CSS3 Zebra Striping */
        table tr:nth-of-type(odd) {
            background: #eee;
        }

    /* Automatic Serial Number Row */
    .css-serial {
        counter-reset: serial-number; /* Set the serial number counter to 0 */
    }

        .css-serial td:first-child:before {
            counter-increment: serial-number; /* Increment the serial number counter */
            content: counter(serial-number); /* Display the counter */
        }
</style>