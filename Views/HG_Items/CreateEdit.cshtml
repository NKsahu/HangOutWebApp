@model HangOut.Models.HG_Items
    @using HangOut.Models
@{
    Layout = null;
    var CurrentOrg = Request.Cookies["UserInfo"];
}
<div class="card">
    <div class="card-header">
        <h3 style="text-align:center;color:#000000"><b>ITEM</b></h3>
        <hr />
    </div>
    <div class="card-body">
        @using (Ajax.BeginForm("CreateEdit", "HG_Items", new { ItemID = Model.ItemID }, new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "DynamicData", LoadingElementId = "waiting", OnSuccess = "OnSuccess" }))
        {

            @Html.HiddenFor(model => model.ItemID)
            @Html.HiddenFor(model => model.Qty)
            <div class="row">
                <div class="col text-center">
                    @if (Model.ItemID > 0)
                    {

                        <img id="DemoUser" src="@Model.Image" width="110" height="110" class="mb-4" /><br />
                        <input type="file" id="FoodImg" name="FoodImg" value="@Model.Image" accept="image/jpeg" onChange="document.getElementById('DemoUser').src = window.URL.createObjectURL(this.files[0])" />
                    }
                    else
                    {
                        <img id="DemoUser" src="~/Assets/fork.png" width="110" height="110" class="mb-4" /><br />
                        <input type="file" id="FoodImg" name="FoodImg" value="0" accept="image/jpeg" onChange="document.getElementById('DemoUser').src = window.URL.createObjectURL(this.files[0])" />
                    }

                </div>
            </div>
            <div class="row">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                @Html.ValidationMessageFor(model => model.ItemID, "", new { @class = "text-danger" })

                @{
                    if (CurrentOrg != null && CurrentOrg["OrgId"] == "0")
                    {
                        <div class="col-md-3">
                            @Html.Label("Organization  ")
                            @Html.DropDownListFor(model => model.OrgID, new SelectList(new HG_OrganizationDetails().GetAll(), "OrgID", "Name", Model.OrgID), "Select Organization Name", new { @class = "form-control", required = "required" })
                            @Html.ValidationMessageFor(model => model.OrgID, "", new { @class = "text-danger" })

                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.OrgID);
                    }
                }

                <div class="col-md-3">
                    @Html.Label("Category Name")
                    @Html.DropDownListFor(model => model.CategoryID, new SelectList(new HG_Category().GetAll(), "CategoryID", "Category", Model.CategoryID), "Select Category", new { @class = "form-control", required = "required", val = Model.CategoryID })
                    @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })

                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Items, htmlAttributes: new { @class = "control-label  " })

                    @Html.EditorFor(model => model.Items, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                    @Html.ValidationMessageFor(model => model.Items, "", new { @class = "text-danger" })

                </div>
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Tax, htmlAttributes: new { @class = "control-label  " })

                    @Html.EditorFor(model => model.Tax, new { htmlAttributes = new { @class = "form-control autodouble", required = "required" } })
                    @Html.ValidationMessageFor(model => model.Tax, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label  " })

                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control autodouble", required = "required" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })

                </div>
                @{
                    List<SelectListItem> FoodType = new List<SelectListItem>()
                                                                    {
                                                                        new SelectListItem{Text="VEG",Value="1"},
                                                                        new SelectListItem{Text="NON-VEG",Value="2"},

                                                                    };
                }
                <div class="col-md-3">
                    @Html.LabelFor(model => model.ItemMode, htmlAttributes: new { @class = "control-label  " })
                    <div class="checkbox">
                        @Html.DropDownListFor(model => model.ItemMode, FoodType, new { @class = "form-control", required = "required" })
                        @Html.ValidationMessageFor(model => model.ItemMode, "", new { @class = "text-danger", required = "required" })
                    </div>
                </div>


                <div class="col-md-3">
                    @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label  " })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.Status)
                            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger", required = "required" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-1">
                    @Html.Label("Save", new { @class = "text-white" })
                    <input type="submit" value="Save" class="btn btn-success" />

                </div>
            </div>
        }
    </div>
</div>
<script>
    $(document).ready(function () {
        GetDrowpDownCity();
        $("#OrgID").change(function () {
            GetDrowpDownCity();
        });

        function GetDrowpDownCity() {
            var OrgID = $("#OrgID").val();
            console.log("OrgId " + OrgID);
            var categoryvalue = $("#CategoryID").attr("val");
            if (OrgID=="" ||OrgID == null) {
                OrgID = "0";
            }
            var Obj = "{OID: "+OrgID+"}";
            $("#waiting").show();
            $.ajax({
                url: "/WebApi/GetMenulist?Obj=" + Obj,
                type: "GET",
                success: function (data) {
                    var JsonArray = JSON.parse(data);
                    $("#CategoryID").html("");
                    $('<option>',{value: "0",text: "Select"}).html("Select").appendTo("#CategoryID");
                    if (JsonArray.length > 0) {
                        $.each(JsonArray, function (i, Obj) {      // bind the dropdown list using json result
                            $('<option>',
                                {
                                    value: Obj.CategoryID,
                                    text: Obj.Category
                                }).html(Obj.Category).appendTo("#CategoryID");
                        });
                        $("#CategoryID").val(categoryvalue);
                    }
                  
                       
                    
                    $("#waiting").hide();
                },
                error: function (Xr, Status, ErrorMsg) {
                    $("#CategoryID").html("");
                    $('<option>', { value: "0", text: "Select" }).html("Select").appendTo("#CategoryID");
                    $("#waiting").hide();
                }
            });
        }

    });




</script>

